diff --git a/cpuexec.cpp b/cpuexec.cpp
index cd2b1ba..c9fb935 100644
--- a/cpuexec.cpp
+++ b/cpuexec.cpp
@@ -16,6 +16,7 @@
 #include "debug.h"
 #include "missing.h"
 #endif
+#include <set>
 
 static inline void S9xReschedule (void);
 
@@ -167,6 +168,95 @@ void S9xMainLoop (void)
 				Opcodes = S9xOpcodesSlow;
 		}
 
+		static std::string instructionTraceFilename = "instruction_trace.txt";
+		static std::fstream instructionTraceOut( instructionTraceFilename, std::ofstream::in | std::ofstream::out | std::ofstream::app );
+		static std::set<uint32> codeAddresses;
+		static boolean loadedExistingAddresses = false;
+
+		static std::string labelsFilename = "labels.txt";
+		static std::fstream labelsOut( labelsFilename, std::ofstream::in | std::ofstream::out | std::ofstream::app );
+		static std::set<uint32> labels;
+		static boolean loadedExistingLabels = false;
+
+		if ( !loadedExistingAddresses )
+		{
+			while ( !instructionTraceOut.eof() )
+			{
+				uint32 memory_mode = 0;
+				uint32 index_mode = 0;
+				uint32 address = 0;
+
+				instructionTraceOut >> memory_mode >> index_mode >> address;
+				codeAddresses.insert( address );
+			}
+
+			instructionTraceOut.clear();
+
+			loadedExistingAddresses = true;
+		}
+
+		if ( !loadedExistingLabels )
+		{
+			while ( !labelsOut.eof() )
+			{
+				uint32 address = 0;
+
+				labelsOut >> address;
+				labels.insert( address );
+			}
+
+			labelsOut.clear();
+
+			loadedExistingLabels = true;
+		}
+
+		static boolean recordLabel = false;
+		if ( recordLabel )
+		{
+			auto search = labels.find( Registers.PBPC );
+			if ( search == labels.end() )
+			{
+				labels.insert( Registers.PBPC );
+				labelsOut << Registers.PBPC << std::endl;
+			}
+		}
+
+		switch ( Op )
+		{
+		case 0x90:
+		case 0xB0:
+		case 0xF0:
+		case 0x30:
+		case 0xD0:
+		case 0x10:
+		case 0x80:
+		case 0x50:
+		case 0x70:
+		case 0x82:
+		case 0x4C:
+		case 0x5C:
+		case 0x6C:
+		case 0x7C:
+		case 0xDC:
+		case 0x22:
+		case 0x20:
+		case 0xFC:
+		case 0x6B:
+		case 0x60:
+			recordLabel = true;
+			break;
+		default:
+			recordLabel = false;
+			break;
+		}
+
+		auto search = codeAddresses.find( Registers.PBPC );
+		if ( search == codeAddresses.end() )
+		{
+			codeAddresses.insert( Registers.PBPC );
+			instructionTraceOut << (CheckMemory() ? 1 : 0) << " " << ( CheckIndex() ? 1 : 0 ) << " " << Registers.PBPC << std::endl;
+		}
+
 		Registers.PCw++;
 		(*Opcodes[Op].S9xOpcode)();
 
